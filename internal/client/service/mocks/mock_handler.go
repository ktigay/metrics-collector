// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ktigay/metrics-collector/internal/client/service (interfaces: MetricsHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "github.com/ktigay/metrics-collector/internal/metric"
)

// MockMetricsHandler is a mock of MetricsHandler interface.
type MockMetricsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsHandlerMockRecorder
}

// MockMetricsHandlerMockRecorder is the mock recorder for MockMetricsHandler.
type MockMetricsHandlerMockRecorder struct {
	mock *MockMetricsHandler
}

// NewMockMetricsHandler creates a new mock instance.
func NewMockMetricsHandler(ctrl *gomock.Controller) *MockMetricsHandler {
	mock := &MockMetricsHandler{ctrl: ctrl}
	mock.recorder = &MockMetricsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsHandler) EXPECT() *MockMetricsHandlerMockRecorder {
	return m.recorder
}

// Processing mocks base method.
func (m *MockMetricsHandler) Processing(arg0 [][]metric.Metrics) []metric.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processing", arg0)
	ret0, _ := ret[0].([]metric.Metrics)
	return ret0
}

// Processing indicates an expected call of Processing.
func (mr *MockMetricsHandlerMockRecorder) Processing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processing", reflect.TypeOf((*MockMetricsHandler)(nil).Processing), arg0)
}
